#include <Arduino.h>
#include <WiFi.h>
#include <ESP8266WiFi.h>
#include "fauxmoESP.h"
#include "credentials.h"
#include <IRremoteESP8266.h>
#include <IRsend.h>

const uint16_t kIrLed = 4;  

IRsend irsend(kIrLed);  // Set the GPIO to be used to sending the message.

uint16_t On[595] = {3354, 1684,  484, 1210,  484, 378,  460, 408,  456, 408,  456, 408,  454, 408,  458, 404,  456, 416,  454, 408,  456, 406,  456, 406,  456, 408,  456, 1236,  458, 408,  456, 408,  456, 414,  456, 408,  456, 408,  456, 408,  456, 408,  456, 408,  456, 406,  454, 406,  458, 414,  456, 406,  456, 406,  458, 406,  456, 408,  456, 408,  456, 406,  458, 1236,  458, 412,  456, 1236,  458, 1234,  460, 1234,  484, 1208,  484, 1210,  484, 1208,  484, 380,  456, 1242,  458, 1234,  482, 1212,  482, 1212,  482, 1208,  484, 1210,  484, 1210,  484, 1210,  484, 1216,  484, 378,  458, 408,  456, 408,  454, 406,  456, 408,  456, 406,  456, 408,  456, 412,  458, 406,  456, 406,  456, 1236,  458, 1234,  460, 406,  456, 404,  458, 1236,  458, 1240,  458, 1236,  460, 1234,  482, 380,  458, 406,  458, 1234,  458, 1238,  480, 382,  458, 412,  456, 408,  454, 1236,  458, 408,  456, 406,  456, 1240,  458, 406,  456, 404,  458, 1244,  458, 1236,  458, 406,  456, 1234,  460, 1234,  458, 406,  458, 1234,  458, 1236,  458, 414,  458, 1236,  458, 1236,  458, 408,  454, 406,  460, 1234,  458, 406,  456, 408,  456, 414,  456, 406,  456, 406,  458, 1246,  458, 1234,  458, 406,  456, 1236,  458, 1236,  458, 1244,  458, 408,  456, 406,  456, 406,  456, 408,  456, 406,  456, 1246,  460, 1234,  458, 412,  458, 1234,  458, 1234,  484, 1208,  484, 1208,  484, 1210,  482, 380,  458, 408,  454, 1244,  458, 406,  458, 406,  456, 408,  454, 408,  456, 406,  456, 406,  456, 406,  458, 414,  456, 1234,  458, 1236,  458, 1236,  482, 1210,  482, 1212,  482, 1212,  482, 1208,  484, 1218,  484, 378,  460, 406,  456, 408,  456, 404,  458, 406,  456, 408,  456, 426,  456, 412,  456, 1234,  460, 1234,  458, 1236,  482, 1208,  484, 1210,  482, 1208,  484, 1210,  484, 1218,  484, 378,  458, 406,  456, 408,  456, 406,  456, 406,  458, 406,  456, 406,  458, 414,  456, 1238,  458, 1234,  458, 1232,  458, 1236,  458, 1234,  458, 1234,  484, 1208,  484, 1218,  484, 378,  458, 406,  458, 406,  456, 406,  456, 406,  458, 404,  458, 406,  458, 414,  454, 1236,  458, 1234,  458, 1234,  484, 1210,  482, 1210,  484, 1210,  484, 1208,  484, 1218,  484, 378,  460, 406,  458, 404,  458, 406,  456, 406,  456, 406,  456, 406,  456, 414,  456, 1236,  458, 1234,  460, 1234,  458, 1236,  458, 1234,  482, 1212,  484, 1210,  482, 1216,  484, 1210,  484, 1210,  484, 378,  460, 404,  456, 1236,  458, 1234,  460, 406,  456, 414,  458, 406,  458, 404,  458, 1236,  458, 1234,  458, 406,  456, 406,  456, 1236,  458, 1242,  484, 1212,  484, 378,  458, 406,  458, 406,  456, 1236,  458, 1234,  458, 1236,  484, 1242,  484, 378,  458, 1236,  458, 1234,  458, 1234,  458, 406,  456, 408,  456, 406,  456, 414,  456, 406,  456, 406,  456, 406,  456, 410,  454, 406,  458, 406,  456, 406,  458, 414,  454, 1236,  456, 1234,  458, 1236,  482, 1210,  484, 1210,  484, 1208,  484, 1210,  484, 1218,  484, 380,  458, 408,  456, 408,  456, 406,  458, 406,  456, 408,  456, 406,  456, 414,  456, 1232,  460, 1234,  458, 1234,  458, 1234,  482, 1210,  482, 1210,  484, 1208,  486, 1216,  484, 378,  458, 406,  456, 406,  456, 406,  456, 406,  458, 404,  456, 406,  458, 412,  454, 1236,  458, 1234,  458, 1234,  484, 1210,  484, 1208,  484, 1208,  484, 1208,  484, 1216,  484, 1208,  484, 1208,  486, 376,  458, 408,  454, 406,  456, 408,  456, 406,  456, 414,  456, 408,  456, 406,  456, 1234,  458, 1236,  458, 1236,  458, 1234,  482, 1212,  482, 1204,  482}; 

uint16_t Off[595] = {3354, 1670,  484, 1210,  484, 376,  460, 408,  454, 408,  456, 408,  456, 408,  456, 406,  456, 414,  454, 408,  456, 406,  456, 408,  456, 408,  456, 1236,  458, 442,  456, 408,  456, 416,  454, 406,  456, 406,  456, 406,  456, 406,  456, 408,  456, 406,  456, 436,  456, 414,  454, 406,  458, 404,  458, 408,  454, 408,  456, 408,  454, 406,  458, 1236,  456, 414,  456, 1236,  458, 1236,  484, 1208,  484, 1210,  484, 1210,  482, 1210,  482, 380,  456, 1242,  458, 1236,  456, 1236,  456, 1236,  482, 1210,  484, 1212,  484, 1210,  482, 1210,  484, 1216,  484, 378,  458, 406,  458, 406,  456, 404,  456, 408,  456, 406,  458, 406,  456, 412,  456, 406,  456, 406,  456, 1236,  458, 1236,  458, 406,  456, 406,  456, 1236,  458, 1242,  458, 1234,  482, 1214,  482, 380,  458, 406,  456, 1234,  458, 1234,  482, 382,  458, 414,  454, 1238,  456, 1236,  458, 406,  456, 408,  456, 406,  456, 1236,  458, 406,  456, 1244,  456, 408,  454, 406,  456, 1236,  458, 1236,  458, 1236,  458, 406,  456, 1236,  480, 390,  454, 1236,  458, 1236,  458, 406,  456, 406,  458, 1236,  458, 406,  456, 406,  456, 414,  454, 408,  454, 408,  454, 1238,  456, 1234,  458, 406,  456, 1236,  458, 1246,  484, 1218,  484, 378,  458, 408,  456, 406,  456, 406,  456, 406,  458, 1236,  458, 1234,  482, 388,  454, 1236,  458, 1240,  458, 1234,  484, 1210,  482, 1210,  482, 380,  458, 406,  456, 1244,  458, 406,  456, 406,  456, 408,  456, 408,  456, 406,  456, 408,  456, 408,  456, 412,  458, 1236,  482, 1212,  480, 1212,  484, 1210,  482, 1210,  484, 1210,  484, 1210,  484, 1216,  484, 382,  456, 406,  456, 408,  456, 404,  458, 408,  456, 406,  458, 410,  452, 414,  456, 1236,  458, 1236,  482, 1234,  482, 1210,  482, 1208,  484, 1212,  482, 1208,  482, 1218,  484, 378,  458, 408,  456, 406,  456, 406,  456, 408,  454, 420,  458, 406,  456, 414,  456, 1236,  458, 1234,  460, 1236,  482, 1210,  484, 1208,  484, 1210,  482, 1212,  482, 1218,  482, 378,  458, 406,  456, 404,  458, 408,  456, 406,  456, 408,  456, 408,  456, 416,  456, 1234,  458, 1236,  484, 1208,  482, 1210,  482, 1210,  484, 1210,  484, 1212,  482, 1218,  484, 378,  458, 406,  456, 406,  456, 408,  458, 406,  456, 406,  456, 406,  456, 416,  454, 1234,  458, 1236,  458, 1234,  458, 1236,  482, 1210,  482, 1212,  482, 1210,  484, 1216,  484, 1208,  484, 1208,  484, 382,  456, 406,  454, 1236,  458, 1236,  458, 406,  458, 416,  454, 408,  456, 406,  458, 1232,  460, 1236,  482, 380,  458, 408,  456, 1234,  458, 1242,  458, 1234,  484, 380,  458, 408,  456, 408,  456, 408,  456, 1236,  458, 1234,  460, 1242,  482, 380,  456, 1234,  484, 1212,  484, 1210,  482, 1210,  482, 380,  458, 406,  456, 416,  456, 408,  458, 406,  456, 406,  456, 406,  458, 444,  456, 406,  456, 406,  458, 414,  456, 1236,  456, 1236,  458, 1234,  458, 1234,  482, 1210,  484, 1210,  484, 1208,  484, 1218,  484, 378,  458, 408,  456, 406,  456, 406,  456, 406,  456, 406,  458, 406,  456, 414,  456, 1234,  458, 1234,  484, 1210,  482, 1210,  484, 1210,  484, 1210,  484, 1210,  484, 1218,  482, 380,  456, 408,  456, 406,  456, 1236,  458, 406,  458, 408,  454, 406,  456, 416,  454, 1238,  458, 1232,  460, 1236,  458, 404,  458, 1234,  458, 1236,  458, 1236,  458, 1242,  482, 1210,  482, 1210,  484, 378,  458, 406,  456, 408,  454, 406,  456, 408,  454, 414,  456, 406,  456, 406,  456, 1236,  458, 1236,  458, 1234,  458, 1264,  482, 1208,  484, 1202,  482}; 


fauxmoESP fauxmo;


#define SERIAL_BAUDRATE     115200

#define AC "ac"

void wifiSetup() {

    // Set WIFI module to STA mode
    WiFi.mode(WIFI_STA);

    // Connect
    Serial.printf("[WIFI] Connecting to %s ", WIFI_SSID);
    WiFi.begin(WIFI_SSID, WIFI_PASS);

    // Wait
    while (WiFi.status() != WL_CONNECTED) {
        Serial.print(".");
        delay(100);
    }
    Serial.println();

    // Connected!
 
}

void setup() {

    // Init serial port and clean garbage
    Serial.begin(SERIAL_BAUDRATE);
    Serial.println();
    Serial.println();
    irsend.begin();


    wifiSetup();

    fauxmo.createServer(true); // not needed, this is the default value
    fauxmo.setPort(80); // This is required for gen3 devices
    fauxmo.enable(true);
    fauxmo.addDevice(AC);
    fauxmo.onSetState([](unsigned char device_id, const char * device_name, bool state, unsigned char value) {

     Serial.printf("[MAIN] Device #%d (%s) state: %s value: %d\n", device_id, device_name, state ? "ON" : "OFF", value);

       if (strcmp(device_name, AC)==0) 
       {
        if(state) {
           irsend.sendRaw(On, 595, 38);  
        }
        else 
        {
           irsend.sendRaw(Off, 595, 38);  
        }
          
       }
    

});

}

void loop() {

    // fauxmoESP uses an async TCP server but a sync UDP server
    // Therefore, we have to manually poll for UDP packets
    fauxmo.handle();

    // This is a sample code to output free heap every 5 seconds
    // This is a cheap way to detect memory leaks
    static unsigned long last = millis();
    if (millis() - last > 5000) {
        last = millis();
        Serial.printf("[MAIN] Free heap: %d bytes\n", ESP.getFreeHeap());
    }

    // If your device state is changed by any other means (MQTT, physical button,...)
    // you can instruct the library to report the new state to Alexa on next request:
    // fauxmo.setState(ID_YELLOW, true, 255);

}
